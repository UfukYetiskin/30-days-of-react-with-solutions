//JavaScript Refresher


//---- Variables ----
// Değişken bildirmek için var , let ve const kullanırız . var fonksiyon kapsamıdır, ancak let ve const blok kapsamıdır. Bu yarışmada JavaScript'in ES6 ve üzeri özelliklerini kullanıyoruz. var kullanmaktan kaçının .
let personName = "Ümmühan"
const PI = 3.14;

console.log(personName);
console.log(PI);

//---- Data Types ----
// Numbers - Integers, floats
// Strings - Any data under single quote, double quote or backtick quote
// Booleans - true or false value
// Null - empty value or no value
// Undefined - a declared variable without a value
// Symbol - A unique value that can be generated by Symbol constructor

//---- Arrays -----

const emptyArr = [];

const numbersArr = [0, 3.14, 9.81, 37, 98.6, 100]
const fruitsArr = ['banana', 'orange', 'mango', 'lemon']
const vegetablesArr =['tomato',  'potato', 'Cabbage', 'Onion']

console.log(numbersArr);
console.log(fruitsArr)
console.log(vegetablesArr)

const ummuhanArr = [
    'Ümmühan',
    'Yetişkin',
    true,
    {country : 'Turkey', city: 'Aydın'},
    {skills : ['marketing', 'sales'] }
]
console.log(ummuhanArr);

//Creating an array using split

let js = 'JavaScript'
const charsInJS = js.split('');
console.log(charsInJS); //['J', 'a', 'v', 'a', 'S', 'c', 'r', 'i', 'p', 't']
console.log(charsInJS[0]); // J

// Accessing array items using index
//Dizideki her öğeye dizinlerini kullanarak erişiriz. Bir dizi indeksi 0'dan başlar. 

const fruitArr = ['Apple', 'Mandalin', 'Lemon']
let firstFruitArrValue = fruitArr[0]
console.log(firstFruitArrValue); //Apple

let lastIndexofFruitValue = fruitArr[fruitArr.length - 1 ]
let lastIndexofFruitValue2 = fruitArr.length -1 
console.log(lastIndexofFruitValue); //Lemon
console.log(fruitArr[lastIndexofFruitValue2]); //Lemon

//Modifying array element
//Bir dizi değiştirilebilir (değiştirilebilir). Bir dizi oluşturulduktan sonra dizi öğelerinin içeriğini değiştirebiliriz.

const modifyNumbersArr = [1, 2, 3, 4, 5]
modifyNumbersArr[0] = 6
modifyNumbersArr[1] = 7;
console.log(modifyNumbersArr);//[6, 7, 3, 4, 5]

// ---- Methods to manipulate array | Diziyi işleme yöntemleri

// Bir diziyi işlemek için farklı yöntemler vardır. Dizilerle başa 
//çıkmak için mevcut yöntemlerden bazıları şunlardır: Array, length, 
//concat, indexOf, dilim, splice, join, toString, include, lastIndexOf, 
//isArray, fill, push, pop, shift, unshift

//Array Constructor | Dizi oluşturma

const createArr = Array()
console.log(createArr); //[]

const eightEmptyValuesArr = Array(8);
console.log(eightEmptyValuesArr); // (8) [boş × 8]

// ---- Concatenating  array using concat
//concat: İki diziyi birleştirmek için.

const firstConcatNumberList =[1, 2, 3]
const secondConcarNumberList = [4, 5, 6]
const concatedNumberLists = firstConcatNumberList.concat(secondConcarNumberList);

console.log(concatedNumberLists); //(6) [1, 2, 3, 4, 5, 6]


//--- Getting array length

const getArrayLength = [1, 3, 5,6, 12,41]
console.log(getArrayLength)//[1, 3, 5, 6, 12, 41]

//Getting index of an element 
// indexOf:  Bir dizide bir öğenin olup olmadığını kontrol etmek için kullanılır. Eğer dizide kontrol edilmek istenilen değer varsa index değerini döndürür, aksi takdirde elemana sahip değilse -1 döndürür

const indexOfMethodArr = ['Ummuhan', 'Ufuk', 'Deniz', 'Artemis']
console.log(indexOfMethodArr.indexOf('Ummuhan')) // 0
console.log(indexOfMethodArr.indexOf('Mete')) // -1
console.log(indexOfMethodArr.indexOf('Ufuk')) // 1
console.log(indexOfMethodArr.indexOf('deniz')) // -1
console.log(indexOfMethodArr.indexOf('Deniz')) // 2

//Check items in a list

const checkFruitsArr = ['Banana', 'Orange', 'Mango', 'Lemon']
let indexofMango = checkFruitsArr.indexOf('Mango') //2

if(indexofMango != -1){
    console.log('This fruit does exits in the array')
}else{
    console.log('This fruit does not exits in the array');
}
//This fruit does exits in the array

indexofMango != 1
    ? console.log('This fruit does exits in the array')
    : console.log('This fruit does not exits in the array')
//This fruit does exits in the array

//-- Getting last index of an element in array
//lastIndexOf: Dizide tekrar eden değerin en son indexini verir. Eğer dizide eşleşen öğe yoksa -1 döndürür.

const lastIndexOfMethodArr = [1, 2, 3, 4, 5, 3, 1, 2]

console.log(lastIndexOfMethodArr.lastIndexOf(2)) //7
console.log(lastIndexOfMethodArr.lastIndexOf(4)) //3
console.log(lastIndexOfMethodArr.lastIndexOf(3)) //5
console.log(lastIndexOfMethodArr.lastIndexOf(1)) // 6

//includes: : Bir dizide bir öğenin olup olmadığını kontrol etmek için. Varsa, true değerini döndürür, aksi takdirde false değerini döndürür.

const includesMethodArr = [9, 2, 3, 5, 1, 7]

console.log(includesMethodArr.includes(2)) //true
console.log(indexOfMethodArr.includes(6)) // false

//-- Checking Array
// Array.isArray: Veri türünün Array(dizi) olup olmadığını döndürür

console.log(Array.isArray(lastIndexOfMethodArr)); //true
console.log(Array.isArray(firstFruitArrValue)); //false


// -- Converting array to String
//toString: diziyi string değere dönüştürür

const convertArrtoStringNumbers = [1, 2, 3, 4, 5]
const convertArrtoStringNames = ["Ümmühan", 'Ufuk', 'Deniz']

console.log(convertArrtoStringNames.toString())
console.log(convertArrtoStringNumbers.toString())
// Ümmühan,Ufuk,Deniz
// 1,2,3,4,5

// --- Joining array elements
// join: Dizinin elemanlarını birleştirmek için kullanılır, birleştirme yönteminde ilettiğimiz argüman dizide birleştirilir ve bir dize olarak döndürülür. Varsayılan olarak bir virgül ile birleşir, ancak öğeler arasında birleştirilebilecek farklı dize parametreleri iletebiliriz.

const joinNames = ["Ümmühan", 'Ufuk', 'Deniz']
const joinNumbers = [1, 2, 3, 4, 5]

console.log(joinNames.join()); // Ümmühan,Ufuk,Deniz
console.log(joinNames.join(', ')) //Ümmühan, Ufuk, Deniz
console.log(joinNumbers.join('#')) //1 #2 #3 #4 #5

//-- Slice Array elements
//slice: Aralıktaki birden çok öğeyi kesmek için. İki parametre alır: başlangıç ​​ve bitiş konumu. Bitiş konumunu içermez.

const sliceNumbers = [1, 2, 3, 4, 5, 6, 7]
console.log(sliceNumbers.slice()) // bütün elemanları kopyalar
console.log(sliceNumbers.slice(0)) //Bütün elemanları kopyalar
console.log(sliceNumbers.slice(0, sliceNumbers.length)) //Bütün elemanları kopyalar
console.log(sliceNumbers.slice(2, 5)) //[3, 4, 5] , son elemanı içermez

//splice method in array
//splice: Üç parametre alır: Başlangıç ​​konumu, kaç kez kaldırılacak ve eklenecek öğe sayısı.

const spliceNumbers = [1, 2, 3, 4, 5]
console.log(spliceNumbers.splice()) // bütün elemanları siler

const spliceNumbers2 = [1, 2, 3, 4, 5]
console.log(spliceNumbers2.splice(0,1)) //birinci elemanı siler

const spliceNumbers3 = [1, 2, 3, 4, 5, 6]
console.log(spliceNumbers3.splice(3, 3, 7, 8, 9)) // [1, 2, 3, 7, 8, 9] it removes three item and replace three items

//-- Adding item to an array using push
//push: sonunda öğe ekleme. Mevcut bir dizinin sonuna öğe eklemek için push yöntemini kullanırız.

const pushArr = ['item1', 'item2', 'item3']
pushArr.push('new item');

console.log(pushArr) // ['item1', 'item2', 'item3', 'new item']

//-- Removing the end element using pop
// pop: dizinin son elemanını siler

const popArr = ['firstItem', 'secondItem', 'thirdItem']
popArr.pop();
console.log(popArr); //['firstItem', 'secondItem']

// -- Removing an element from the beginning
//shift: Removing one array element in the begining of the array

const shiftArr = ['firstItem', 'secondItem', 'thirdItem']
shiftArr.shift()
console.log(shiftArr);//['secondItem', 'thirdItem']

//-- Add an element from the beginning
//unshift: dizinin en başına elemen ekler

const unshiftArr = ['firstItem', 'secondItem', 'thirdItem']
unshiftArr.unshift('zero');
console.log(unshiftArr);//['zero', 'firstItem', 'secondItem', 'thirdItem']

