//JavaScript Refresher


//---- Variables ----
// Değişken bildirmek için var , let ve const kullanırız . var fonksiyon kapsamıdır, ancak let ve const blok kapsamıdır. Bu yarışmada JavaScript'in ES6 ve üzeri özelliklerini kullanıyoruz. var kullanmaktan kaçının .
let personName = "Ümmühan"
const PI = 3.14;

console.log(personName);
console.log(PI);

//---- Data Types ----
// Numbers - Integers, floats
// Strings - Any data under single quote, double quote or backtick quote
// Booleans - true or false value
// Null - empty value or no value
// Undefined - a declared variable without a value
// Symbol - A unique value that can be generated by Symbol constructor

//---- Arrays -----

const emptyArr = [];

const numbersArr = [0, 3.14, 9.81, 37, 98.6, 100]
const fruitsArr = ['banana', 'orange', 'mango', 'lemon']
const vegetablesArr = ['tomato', 'potato', 'Cabbage', 'Onion']

console.log(numbersArr);
console.log(fruitsArr)
console.log(vegetablesArr)

const ummuhanArr = [
    'Ümmühan',
    'Yetişkin',
    true,
    { country: 'Turkey', city: 'Aydın' },
    { skills: ['marketing', 'sales'] }
]
console.log(ummuhanArr);

//Creating an array using split

let js = 'JavaScript'
const charsInJS = js.split('');
console.log(charsInJS); //['J', 'a', 'v', 'a', 'S', 'c', 'r', 'i', 'p', 't']
console.log(charsInJS[0]); // J

// Accessing array items using index
//Dizideki her öğeye dizinlerini kullanarak erişiriz. Bir dizi indeksi 0'dan başlar. 

const fruitArr = ['Apple', 'Mandalin', 'Lemon']
let firstFruitArrValue = fruitArr[0]
console.log(firstFruitArrValue); //Apple

let lastIndexofFruitValue = fruitArr[fruitArr.length - 1]
let lastIndexofFruitValue2 = fruitArr.length - 1
console.log(lastIndexofFruitValue); //Lemon
console.log(fruitArr[lastIndexofFruitValue2]); //Lemon

//Modifying array element
//Bir dizi değiştirilebilir (değiştirilebilir). Bir dizi oluşturulduktan sonra dizi öğelerinin içeriğini değiştirebiliriz.

const modifyNumbersArr = [1, 2, 3, 4, 5]
modifyNumbersArr[0] = 6
modifyNumbersArr[1] = 7;
console.log(modifyNumbersArr);//[6, 7, 3, 4, 5]

// ---- Methods to manipulate array | Diziyi işleme yöntemleri

// Bir diziyi işlemek için farklı yöntemler vardır. Dizilerle başa 
//çıkmak için mevcut yöntemlerden bazıları şunlardır: Array, length, 
//concat, indexOf, dilim, splice, join, toString, include, lastIndexOf, 
//isArray, fill, push, pop, shift, unshift

//Array Constructor | Dizi oluşturma

const createArr = Array()
console.log(createArr); //[]

const eightEmptyValuesArr = Array(8);
console.log(eightEmptyValuesArr); // (8) [boş × 8]

// ---- Concatenating  array using concat
//concat: İki diziyi birleştirmek için.

const firstConcatNumberList = [1, 2, 3]
const secondConcarNumberList = [4, 5, 6]
const concatedNumberLists = firstConcatNumberList.concat(secondConcarNumberList);

console.log(concatedNumberLists); //(6) [1, 2, 3, 4, 5, 6]


//--- Getting array length

const getArrayLength = [1, 3, 5, 6, 12, 41]
console.log(getArrayLength)//[1, 3, 5, 6, 12, 41]

//Getting index of an element 
// indexOf:  Bir dizide bir öğenin olup olmadığını kontrol etmek için kullanılır. Eğer dizide kontrol edilmek istenilen değer varsa index değerini döndürür, aksi takdirde elemana sahip değilse -1 döndürür

const indexOfMethodArr = ['Ummuhan', 'Ufuk', 'Deniz', 'Artemis']
console.log(indexOfMethodArr.indexOf('Ummuhan')) // 0
console.log(indexOfMethodArr.indexOf('Mete')) // -1
console.log(indexOfMethodArr.indexOf('Ufuk')) // 1
console.log(indexOfMethodArr.indexOf('deniz')) // -1
console.log(indexOfMethodArr.indexOf('Deniz')) // 2

//Check items in a list

const checkFruitsArr = ['Banana', 'Orange', 'Mango', 'Lemon']
let indexofMango = checkFruitsArr.indexOf('Mango') //2

if (indexofMango != -1) {
    console.log('This fruit does exits in the array')
} else {
    console.log('This fruit does not exits in the array');
}
//This fruit does exits in the array

indexofMango != 1
    ? console.log('This fruit does exits in the array')
    : console.log('This fruit does not exits in the array')
//This fruit does exits in the array

//-- Getting last index of an element in array
//lastIndexOf: Dizide tekrar eden değerin en son indexini verir. Eğer dizide eşleşen öğe yoksa -1 döndürür.

const lastIndexOfMethodArr = [1, 2, 3, 4, 5, 3, 1, 2]

console.log(lastIndexOfMethodArr.lastIndexOf(2)) //7
console.log(lastIndexOfMethodArr.lastIndexOf(4)) //3
console.log(lastIndexOfMethodArr.lastIndexOf(3)) //5
console.log(lastIndexOfMethodArr.lastIndexOf(1)) // 6

//includes: : Bir dizide bir öğenin olup olmadığını kontrol etmek için. Varsa, true değerini döndürür, aksi takdirde false değerini döndürür.

const includesMethodArr = [9, 2, 3, 5, 1, 7]

console.log(includesMethodArr.includes(2)) //true
console.log(indexOfMethodArr.includes(6)) // false

//-- Checking Array
// Array.isArray: Veri türünün Array(dizi) olup olmadığını döndürür

console.log(Array.isArray(lastIndexOfMethodArr)); //true
console.log(Array.isArray(firstFruitArrValue)); //false


// -- Converting array to String
//toString: diziyi string değere dönüştürür

const convertArrtoStringNumbers = [1, 2, 3, 4, 5]
const convertArrtoStringNames = ["Ümmühan", 'Ufuk', 'Deniz']

console.log(convertArrtoStringNames.toString())
console.log(convertArrtoStringNumbers.toString())
// Ümmühan,Ufuk,Deniz
// 1,2,3,4,5

// --- Joining array elements
// join: Dizinin elemanlarını birleştirmek için kullanılır, birleştirme yönteminde ilettiğimiz argüman dizide birleştirilir ve bir dize olarak döndürülür. Varsayılan olarak bir virgül ile birleşir, ancak öğeler arasında birleştirilebilecek farklı dize parametreleri iletebiliriz.

const joinNames = ["Ümmühan", 'Ufuk', 'Deniz']
const joinNumbers = [1, 2, 3, 4, 5]

console.log(joinNames.join()); // Ümmühan,Ufuk,Deniz
console.log(joinNames.join(', ')) //Ümmühan, Ufuk, Deniz
console.log(joinNumbers.join('#')) //1 #2 #3 #4 #5

//-- Slice Array elements
//slice: Aralıktaki birden çok öğeyi kesmek için. İki parametre alır: başlangıç ​​ve bitiş konumu. Bitiş konumunu içermez.

const sliceNumbers = [1, 2, 3, 4, 5, 6, 7]
console.log(sliceNumbers.slice()) // bütün elemanları kopyalar
console.log(sliceNumbers.slice(0)) //Bütün elemanları kopyalar
console.log(sliceNumbers.slice(0, sliceNumbers.length)) //Bütün elemanları kopyalar
console.log(sliceNumbers.slice(2, 5)) //[3, 4, 5] , son elemanı içermez

//splice method in array
//splice: Üç parametre alır: Başlangıç ​​konumu, kaç kez kaldırılacak ve eklenecek öğe sayısı.

const spliceNumbers = [1, 2, 3, 4, 5]
console.log(spliceNumbers.splice()) // bütün elemanları siler

const spliceNumbers2 = [1, 2, 3, 4, 5]
console.log(spliceNumbers2.splice(0, 1)) //birinci elemanı siler

const spliceNumbers3 = [1, 2, 3, 4, 5, 6]
console.log(spliceNumbers3.splice(3, 3, 7, 8, 9)) // [1, 2, 3, 7, 8, 9] it removes three item and replace three items

//-- Adding item to an array using push
//push: sonunda öğe ekleme. Mevcut bir dizinin sonuna öğe eklemek için push yöntemini kullanırız.

const pushArr = ['item1', 'item2', 'item3']
pushArr.push('new item');

console.log(pushArr) // ['item1', 'item2', 'item3', 'new item']

//-- Removing the end element using pop
// pop: dizinin son elemanını siler

const popArr = ['firstItem', 'secondItem', 'thirdItem']
popArr.pop();
console.log(popArr); //['firstItem', 'secondItem']

// -- Removing an element from the beginning
//shift: Removing one array element in the begining of the array

const shiftArr = ['firstItem', 'secondItem', 'thirdItem']
shiftArr.shift()
console.log(shiftArr);//['secondItem', 'thirdItem']

//-- Add an element from the beginning
//unshift: dizinin en başına elemen ekler

const unshiftArr = ['firstItem', 'secondItem', 'thirdItem']
unshiftArr.unshift('zero');
console.log(unshiftArr);//['zero', 'firstItem', 'secondItem', 'thirdItem']

//Reversing array order
//reverse: dizinin sırasını index değerlerine göre tersine çevirir

const reverseArr = [1, 2, 3, 4, 5]
console.log(reverseArr.reverse()) //0:5 1:4 2:3 3:2 

//Sorting elements in array
//sort: dizi öğelerini artan sırada düzenleyin. Sort bir geri arama fonksiyonu alır, sort geri arama fonksiyonu ile nasıl kullandığımızı ilerleyen bölümlerde göreceğiz.

const sortArr = ['Ufuk', 'Ümmühan', 'Deniz', 'Artemis']
console.log(sortArr.sort(function (b, a) { return b - a }))

const sortNumbers = [22, 12, 2, 3, 5]
console.log(sortNumbers.sort(function (a, b) { return b - a }))

//Array of arrays 
// Dizi, bir dizinin kendisi de dahil olmak üzere farklı veri türlerini depolayabilir. Bir dizi dizi oluşturalım

const arrayofArray = [[1, 2, 3, 4, 5], ['HTML', 'JS', 'CSS', 'React']]
console.log(arrayofArray)
console.log(arrayofArray[0]) //[1, 2, 3, 4, 5]
console.log(arrayofArray[1]); //['HTML', 'JS', 'CSS', 'React']
console.log(arrayofArray.length) // 2

//Execises 
console.log("--- Exercises Level 1")
const firstExercisesCountriesArr = ['Albania',
    'Bolivia',
    'Canada',
    'Denmark',
    'Ethiopia',
    'Finland',
    'Germany',
    'Hungary',
    'Ireland',
    'Japan',
    'Kenya',]
const firstExercisesWebTechsArr = [
    'HTML',
    'CSS',
    'JavaScript',
    'React',
    'Redux',
    'Node',
    'MongoDB',]
// 1. Declare an empty array
const exerciseEmptyArr = Array();

//2. Declare an array with more than 5 number of elements
const exerciseEmptyArr2 = Array(5)

//3. Find the length of your array
console.log(exerciseEmptyArr2.length) // 5 

//4. Get the first item, the middle item and the last item of the array
console.log('First item of the Countries: ', firstExercisesCountriesArr[0])
console.log('Middle item of the Countries: ', firstExercisesCountriesArr[Math.round(firstExercisesCountriesArr.length / 2)])
console.log('Last item of the Countries: ', firstExercisesCountriesArr[firstExercisesCountriesArr.length - 1])

//5. Declare an array called mixedDataTypes, put different data types in the array and find the length of the array. The array size should be greater than 5
const mixedDataTypes = ["Ümmühan", { name: "Ümmühan", surname: "Gümüş" }, 23, ['Marketing', 'Digitale Marketing', 'Sales'], true]
//6. Declare an array variable name itCompanies and assign initial values Facebook, Google, Microsoft, Apple, IBM, Oracle and Amazon
const itCompanies = ['Facebook', 'Google', 'Microsoft', 'Apple', 'IBM', 'Oracle', 'Amazon']
//7. Print the array using console.log()
console.log(itCompanies)

//8. Print the number of companies in the array
console.log(itCompanies.length)
//9. Print the first company, middle and last company
console.log('First Company: ', itCompanies[0])
console.log('Middle Company: ', itCompanies[Math.round(itCompanies.length / 2)])
console.log('Last Company: ', itCompanies[itCompanies.length - 1])
//10. Print out each company
itCompanies.map(company => console.log(company))
//11. Change each company name to uppercase one by one and print them out
itCompanies.map(company => console.log(company.toLocaleUpperCase()))
//12. Print the array like as a sentence: Facebook, Google, Microsoft, Apple, IBM,Oracle and Amazon are big IT companies.
const indexOfFB = itCompanies.indexOf('Facebook');
const indexOfGoogle = itCompanies.indexOf('Google');
const indexOfMicrosoft = itCompanies.indexOf('Microsoft');
const indexOfApple = itCompanies.indexOf('Apple');
const indexOfIBM = itCompanies.indexOf('IBM');
const indexOfOracle = itCompanies.indexOf('Oracle');
const indexOfAmazon = itCompanies.indexOf('Amazon');
console.log(`${itCompanies[indexOfFB]}, ${itCompanies[indexOfGoogle]}, ${itCompanies[indexOfMicrosoft]}, ${itCompanies[indexOfApple]}, ${itCompanies[indexOfIBM]}, ${itCompanies[indexOfOracle]} and ${itCompanies[indexOfAmazon]} are big IT companies.`)
//13. Check if a certain company exists in the itCompanies array. If it exist return the company else return a company is not found
if (itCompanies.indexOf('Getir') == -1) {
    itCompanies.push('Getir')
} else {
    console.log('Getir, dizide mevcut')
}
//14. Filter out companies which have more than one 'o' without the filter method
itCompanies.map(company => {
    if (company.split("o").length - 1 >= 2) {
        console.log(company)
    }
})
for (let i = 0; i < itCompanies.length; i++) {
    if (itCompanies[i].split("o").length - 1 >= 2) {
        console.log(itCompanies[i])
    }
}
//15. Sort the array using sort() method
itCompanies.sort();
//16.Reverse the array using reverse() method
itCompanies.reverse()
//17. Slice out the first 3 companies from the array
console.log(itCompanies.slice(0, 3))

//18. Slice out the last 3 companies from the array
console.log(itCompanies.slice(itCompanies.length - 4, itCompanies.length - 1))
//19. Slice out the middle IT company or companies from the array
console.log(itCompanies.slice(itCompanies.length / 2, itCompanies.length / 2))
//20. Remove the first IT company from the array
itCompanies.shift();
//21. Remove the middle IT company or companies from the array

//22. Remove the last IT company from the array
//23. Remove all IT companies
console.log(itCompanies.splice(0, itCompanies.length))
console.log(itCompanies)

//4. Conditionals(Koşullar)

console.log(' --------- Conditionals (Koşullar) ------')

//if
let num = 3;
if (num > 0) {
    console.log(`${num} is positive number`)
}

let isRaining = true
if (isRaining) {
    console.log('Remember to take your rain coat.')
}

//Switch

let todayIsSunday = 'Sunday'
switch (todayIsSunday) {
    case 'Sunday':
        console.log('Today is Sunday')
        break
    case 'Friday':
        console.log('Today is Friday')
        break;
    default:
        break;
}


//Ternary Operators
//Üçlü operatör React'te çok yaygındır . If else ifadesini yazmanın kısa bir yoludur. React'te birçok durumda üçlü operatör kullanırız.
let isRainingToday = true
isRainingToday
    ? console.log('You need a rain coat')
    : console.log('No need for a rain coat')

//5. Loops (Döngüler)
console.log('---Loops----')
/*
Programlamada, tekrarlayan görevleri gerçekleştirmek için farklı döngüler kullanırız.
 Bu nedenle döngü, sıkıcı ve tekrarlayan görevleri otomatikleştirmemize yardımcı 
 olabilir. JavaScript'te ayrıca tekrarlayan görevler üzerinde çalışmak için 
 kullanabileceğimiz farklı döngü türleri vardır.

Bir döngü olmadan bin kez Merhaba dünya yazdırmanız istendiğini hayal edin, bu sıkıcı 
görevi yapmak bir veya iki saat sürebilir. Ancak, döngü kullanarak bir saniyeden daha 
kısa sürede yazdırabiliriz.

Loops:
    for
    while
    do while
    for of
    forEach
    for in
*/

//for
for (let i = 0; i < 10; i++) {
    console.log(i)
}

let sum = 0;
for (let i = 0; i < 11; i++) {
    sum += i
}
console.log(sum)

const forLoopsArr = [11, 22, 33, 44]
for (let i = 0; i < forLoopsArr.length; i++) {
    console.log(forLoopsArr[i])
}
//Diziyi tersine çevirir
const reverseArrWithFor = ['First Item', 'Second Item', 'Third İtem', 'Fourth Item']
const lastIndexofFor = reverseArrWithFor.length - 1
const newArrFor = []
for (let i = lastIndexofFor; i >= 0; i--) {
    newArrFor.push(reverseArrWithFor[i])
}
console.log(newArrFor)

//while
let promptCount = 8
while (promptCount > 0) {
    console.log(promptCount)
    promptCount--
}

//do while
let doWhileCount = 0
do {
    console.log(doWhileCount)
    doWhileCount++
} while (doWhileCount < 11)

//for of 

const forOfArr = ['Finland', 'Sweden', 'Norway', 'Denmark', 'Iceland']
for (const country of forOfArr) {
    console.log(country.toLocaleLowerCase())
}

//forEach
//Dizinin dizini ile ilgileniyorsak, forEach dizisi for of döngüsüne tercih edilir. forEach dizisi yöntemi bir geri arama işlevi alır, geri arama işlevi üç bağımsız değişken alır: öğe, dizin ve dizinin kendisi
const forEachNumbersArr = [11, 12, 13, 14]
forEachNumbersArr.forEach((number, index) => {
    console.log(number, index)
})

const forEachCountriesArr = ['Finland', 'Sweden', 'Norway', 'Denmark', 'Iceland']
forEachCountriesArr.forEach((country, index, arr) => {
    console.log(index, country.toLocaleUpperCase())
    if (index % 2 == 0) {
        console.log(country)
    }
})

//for in
//for in döngüsü, nesnenin anahtarlarını almak için nesne değişmezleriyle birlikte kullanılabilir.
const forInLoopsObject = {
    firstName: 'Asabeneh',
    lastName: 'Yetayeh',
    age: 250,
    country: 'Finland',
    skills: ['HTML', 'CSS', 'JS', 'React', 'Node', 'Python', 'D3.js'],
}
for (const key in forInLoopsObject) {
    console.log(key, forInLoopsObject[key])
}

//Interrupting a loop and skipping an item | Bir döngüyü kesintiye uğratmak ve bir öğeyi atlamak

//break,
//break, bir döngüyü kesmek için kullanılır

for (let i = 0; i < 5; i++) {
    if (i == 3) {
        break
    }
    console.log(i) // 0, 1 ,2 
}

//continue
//Belirli bir yinelemeyi atlamak için devam anahtar sözcüğünü kullanırız.

for (let i = 0; i < 5; i++) {
    if (i == 2) {
        continue
    }
    console.log(i)
}

//For ,  yineleme sayısı bilindiğinde herhangi bir yerde kullanılabilir.
//While, Yineleme sayısı bilinmediğinde döngü
//Do while döngüsü ve while döngüsü hemen hemen aynıdır, ancak while döngüsü, koşul yanlış olsa bile en az bir kez çalıştırılır
// for of, yalnız dizi için kullanılır
// forEach, index değerlerine ihtiyacımız olduğu diziler için kullanılır
// for in, object(nesne) için kullanılır


console.log("---Scope---")
//-------Scope
/*
Scope, çalışma zamanı sırasında kodunuzun belirli bir bölümündeki değişkenlerin, 
fonksiyonların ve nesnelerin(objects) erişilebilirliğidir. Başka bir deyişle, 
Scope, kodunuzun belli kısımlarında değişkenlerin ve benzerlerinin görünürlüğüdür.

Değişken, programlamanın temel parçasıdır. Farklı veri türlerini depolamak için 
değişken tanımlıyoruz. Bir değişken bildirmek için var , let ve const anahtar 
sözcüklerini kullanırız . Bir değişken farklı kapsamda bildirilebilir. 
Bu bölümde var veya let kullandığımızda değişkenlerin kapsamını, kapsamını 
göreceğiz. Değişken kapsamları şunlar olabilir:
- Window
- Global
- Local
Değişken, global veya yerel olarak veya pencere kapsamı olarak bildirilebilir. 
Hem küresel hem de yerel kapsamı göreceğiz. let, var veya const olmadan bildirilen 
her şey pencere düzeyinde kapsamlandırılır.

Bir Scope.js dosyamız olduğunu hayal edelim.
*/

//Window Scope
// Console.log()'u kullanmadan tarayıcınızı açın ve kontrol edin, tarayıcıya a veya b 
// yazarsanız a ve b'nin değerini göreceksiniz. Bu, a ve b'nin zaten window 
// mevcut olduğu anlamına gelir.

//window, tüm javascript nesnelerinin temel kapsamıdır ve bildirimden önce "var" 
//kullanmazsanız, tanımladığınız her değişkene otomatik olarak "eklenir"
/*
window.foo = 5;
şununla aynı:

var foo = 5;
veya:

function() {
foo = 5;
}
ancak:

function() {
var foo = 5;
}
bu durumda "foo" yereldir (window.foo === tanımsız)
*/
/*
    scope.js
a = 'JavaScript' // bu her yerde bulunan bir pencere kapsamıdır
b = 10 // bu bir pencere kapsam değişkenidir
function letsLearnScope() {
  console.log(a, b)
  if (true) {
    console.log(a, b)
  }
}
console.log(a, b) // erişilebilir
*/

//Global Scope
/*
Program içerisinde fonksiyonların dışında tanımlanan ve her yerden erişilebilen 
scope tipidir. Global Scope’da tanımlı bir değişkene dosya içerisinde her yerden 
erişilebilir. Bu değişkenlere de global değişken adı verilir. Uygulama içerisinde 
çok fazla global değişken kullanımı önerilmez. Çünkü local değişkenler işi bitince 
bellekten silinir ancak global değişkenler varlığını sürdürmeye devam eder. Bu 
durum da ileride memory(bellek) sorunlarına yol açabilir. O yüzden olabildiğince 
global değişken tanımlamaktan kaçınalım.
*/
/*
    scope.js
let a = 'JavaScript' // is a global scope it will be found anywhere in this file
let b = 10 // is a global scope it will be found anywhere in this file
function letsLearnScope() {
  console.log(a, b) // JavaScript 10, accessible
  if (true) {
    let a = 'Python'
    let b = 100
    console.log(a, b) // Python 100
  }
  console.log(a, b)
}
letsLearnScope()
console.log(a, b) // JavaScript 10, accessible
*/
//scope.js


//Local Scope
/*
Değişken bir fonksiyon içerisinde tanımlanmışsa bunun kapsamına Local Scope adı 
verilir. Tanımlanan değişken de bir local değişkendir. 

    scope.js
let a = 'JavaScript' // is a global scope it will be found anywhere in this file
let b = 10 // is a global scope it will be found anywhere in this file
function letsLearnScope() {
  console.log(a, b) // JavaScript 10, accessible
  let c = 30
  if (true) {
     we can access from the function and outside the function but
     variables declared inside the if will not be accessed outside the if block
    let a = 'Python'
    let b = 20
    let d = 40
    console.log(a, b, c) // Python 20 30
  }
   we can not access c because c's scope is only the if block
  console.log(a, b) // JavaScript 10
}
letsLearnScope()
console.log(a, b) // JavaScript 10, accessible
*/
/*
Kapsam let ve const aynıdır. Fark sadece yeniden atamadır. const değişkeninin 
değerini değiştiremez veya yeniden atayamayız. let ve const kullanmanızı şiddetle 
tavsiye ederim, let ve const kullanarak temiz kod yazacak ve hata ayıklaması zor 
hatalardan kaçınacaksınız. Genel bir kural olarak, değişen herhangi bir değer 
için let , herhangi bir sabit değer için const ve dizi, nesne, ok işlevi ve işlev 
ifadesi için kullanabilirsiniz.
*/

//Block Scope : Süslü parantezler { } arasında tanımlı olan scopedur. Bu bir if 
//bloğu, for, while ya da herhangi bir keyword kullanmadan { } da olabilir.


console.log("----- Objects -----")
// ----- Objects -----

/*
Her şey bir nesne olabilir ve nesnelerin özellikleri vardır ve özelliklerin 
değerleri vardır, bu nedenle bir nesne bir anahtar değer çiftidir. Anahtarın 
sırası ayrılmamıştır veya herhangi bir sipariş yoktur. Bir nesne değişmezi 
oluşturmak için iki küme parantezini kullanırız.
*/

//creating an empty object
const emptyObject = {}

//creating an objecting with values
const objectofUfuk = {
    firstName: "Ufuk",
    lastName: 'Yetişkin',
    age: 26,
    country: 'Turkey',
    city: 'Diyarbakır',
    skills: ['HTML', 'CSS', 'JavaScript', 'Boostrap', 'React'],
    isMarried: false,
    isLove: true
}
console.log(objectofUfuk)

//Getting Values from an object

const objectofUmmuhan = {
    firstName: "Ümmühan",
    lastName: 'Yetişkin',
    age: 23,
    country: 'Turkey',
    city: 'Muğla',
    skills: ['Sales', 'E-Costumers', 'Marketing', 'Digitale Marketing'],
    isMarried: false,
    isLove: true,

    getFullName: function () {
        return this.firstName + " " + this.lastName
    },
    phoneNumber: "+905426589856",
    'home phone': '0262145896'
}

console.log(objectofUmmuhan.firstName)
console.log(objectofUmmuhan.lastName)
console.log(objectofUmmuhan.getFullName())

// değere köşeli parantez ve anahtar adı kullanılarak erişilebilir
console.log(objectofUmmuhan['firstName'])
console.log(objectofUmmuhan['phoneNumber'])
console.log(objectofUmmuhan['isMarried'])

// örneğin telefon numarasına erişmek için sadece köşeli parantez yöntemini kullanıyoruz
console.log(objectofUmmuhan['home phone'])

//Creating object methods | Nesne yöntemleri oluşturma

/*
Şimdi, kişi nesnesinin getFullName özellikleri vardır. getFullName, kişi nesnesinin 
içindeki işlevdir ve biz ona nesne yöntemi diyoruz. Bu anahtar kelime, nesnenin 
kendisine atıfta bulunur . Nesnenin farklı özelliklerinin değerlerine erişmek için 
this kelimesini kullanabiliriz . Bir ok işlevini nesne yöntemi olarak kullanamayız, 
çünkü bu sözcüğü nesnenin kendisi yerine bir ok işlevinin içindeki pencereye atıfta 
bulunur. Nesne örneği:
*/
const objectofDeniz = {
    firstName: 'Deniz',
    lastName: 'Gümüş Yetişkin',
    getFullName: function () {
        return `${this.firstName} ${this.lastName}`
    }
}
console.log(objectofDeniz.getFullName())

//Setting new key for an object

objectofDeniz.nationality = 'Kurdish'
objectofDeniz.country = 'Turkey'
objectofDeniz.skills = []
objectofDeniz.skills.push('Swimming')
objectofDeniz.skills.push('Futbol')
objectofDeniz.isLove = false

objectofDeniz.getDenizInfo = function () {
    let getFullName = `${this.firstName} ${this.lastName}`
    let getSkills = `${this.skills[0]} and ${this.skills[1]}`
    let location = `${this.country}`
    let statement = `${getFullName}, is a child of ${objectofUfuk.firstName} and ${objectofUmmuhan.firstName}. She lives in ${location}. She teaches ${getSkills}`
    return `${statement}`
}
console.log(objectofDeniz.getDenizInfo())

//Object Methods

//Bir nesneyi işlemek için farklı yöntemler vardır. Mevcut yöntemlerden bazılarını görelim.
//Object.assign : Orijinal nesneyi değiştirmeden bir nesneyi kopyalamak için

const copyObjectofDeniz = Object.assign({}, objectofDeniz)
console.log(copyObjectofDeniz)

//Getting object keys using Object.keys()
//Object.keys : Bir nesnenin anahtarlarını veya özelliklerini dizi olarak almak için

const keys = Object.keys(copyObjectofDeniz)
console.log(keys)

//Getting object keys using  Object.values()
//Object.values ​​: Bir nesnenin değerlerini dizi olarak almak için
const values = Object.values(copyObjectofDeniz)
console.log(values)

//Getting object keys and values using Object.entries()
//Object.entries : Bir dizideki anahtarları ve değerleri almak için

const entries = Object.entries(copyObjectofDeniz)
console.log(entries)

//Checking properties using hasOwnProperty()
//hasOwnProperty : Bir nesnede belirli bir anahtarın veya özelliğin olup olmadığını kontrol etmek için

console.log(copyObjectofDeniz.hasOwnProperty('name')) //false
console.log(copyObjectofDeniz.hasOwnProperty('isLove'))//true

//Exercises Level 1
console.log("Exercises Level 1")
//1. Create an empty object called dog

const emptyDogObject = {}

//2. Print the the dog object on the console

console.log(emptyDogObject)

//3. Add name, legs, color, age and bark properties for the dog object. The bark property is a method which return woof woof

emptyDogObject.name = 'Cerberus'
emptyDogObject.legs = 4
emptyDogObject.color = 'Black'
emptyDogObject.Bark = function () {
    return "Woof Woof"
}

//4. Get name, legs, color
console.log(emptyDogObject.name, emptyDogObject.legs)

//5. Set new properties the dog object: breed, getDogInfo

emptyDogObject.breed = "Pitbull"
emptyDogObject.getDogInfo = function () {
    return `${this.name} is ${this.breed}. His color is ${this.color}.`
}

//Exercises: Level 2
const users = {
    Alex: {
        email: 'alex@alex.com',
        skills: ['HTML', 'CSS', 'JavaScript'],
        age: 20,
        isLoggedIn: false,
        points: 30
    },
    Asab: {
        email: 'asab@asab.com',
        skills: ['HTML', 'CSS', 'JavaScript', 'Redux', 'MongoDB', 'Express', 'React', 'Node'],
        age: 25,
        isLoggedIn: false,
        points: 50
    },
    Brook: {
        email: 'daniel@daniel.com',
        skills: ['HTML', 'CSS', 'JavaScript', 'React', 'Redux'],
        age: 30,
        isLoggedIn: true,
        points: 50
    },
    Daniel: {
        email: 'daniel@alex.com',
        skills: ['HTML', 'CSS', 'JavaScript', 'Python'],
        age: 20,
        isLoggedIn: false,
        points: 40
    },
    John: {
        email: 'john@john.com',
        skills: ['HTML', 'CSS', 'JavaScript', 'React', 'Redux', 'Node.js'],
        age: 20,
        isLoggedIn: true,
        points: 50
    },
    Thomas: {
        email: 'thomas@thomas.com',
        skills: ['HTML', 'CSS', 'JavaScript', 'React'],
        age: 20,
        isLoggedIn: false,
        points: 40
    },
    Paul: {
        email: 'paul@paul.com',
        skills: ['HTML', 'CSS', 'JavaScript', 'MongoDB', 'Express', 'React', 'Node'],
        age: 20,
        isLoggedIn: false,
        points: 40
    }
}

//1. Find the person who has many skills in the users object.

//Burada eğer 0 verirsek değerlere en küçük değer her zaman 0 kalacaktır. Bu yüzden herhangi property'nin uzunluğunu atarız
let enBuyuk = users.Alex.skills.length;
let enKucuk = users.Alex.skills.length;
for (const user in users) {

    let count = Object.keys(users[user].skills).length // Property'lere ait skills propertylerinin uzunluğunu verir
    console.log(count)

    console.log(user, users[user].skills.length) // user propertysini verir ve yanında skills dizisinin uzunluğunu verir

    if (enBuyuk > count) {
        enBuyuk = count
    }
    if (enKucuk < count) {
        enKucuk = count
    }
}
console.log("En Çok Beceri: " + enBuyuk + " \n" + "En az Beceri: " + enKucuk)

//2. Oturum açmış kullanıcıları sayın, aşağıdaki nesneden 50 puana eşit olan kullanıcıları sayın

for (const user in users) {
    let count = Object.keys(users[user].points) //
    console.log(users[user].points)
    console.log(user, users[user].points) //user property'si ile points değerini bize döndürür her bir property için
    console.log("Counts" + count)
    if (users[user].points == 50) {
        console.log(user)
    }
}

console.log("----Functions-----")
//-------------Functions--------
/*
Function, belirli bir görevi gerçekleştirmek için tasarlanmış yeniden kullanılabilir 
bir kod bloğu veya programlama ifadeleridir. Bir işlev, bir işlev anahtar sözcüğü, 
ardından bir ad ve ardından parantez () ile bildirilir. Bir parantez bir parametre 
alabilir. Bir işlev bir parametre alırsa, argümanla çağrılır. Bir işlev ayrıca 
varsayılan bir parametre alabilir. Bir işleve veri depolamak için, bir işlevin belirli 
veri türlerini döndürmesi gerekir. Değeri almak için bir işlevi çağırırız veya 
çağırırız. İşlev kodu yapar:

- temiz ve okunması kolay
- yeniden kullanılabilir
- test edilmesi kolay

Bir işlev birkaç yolla bildirilebilir veya oluşturulabilir:

- Declaration function
- Expression function
- Anonymous function
- Arrow function
*/

//Function Declaration

//without parameters
function functionDeclaration() {
    let num = 2;
    let sq = num * num
    console.log(sq)
}
functionDeclaration();

//With parameters
function functionDeclarationWithParamers(num) {
    return num * num
}
console.log(functionDeclarationWithParamers(2))

const arrowFunc = (radius) => {
    let area = Math.PI * radius * radius
    return area;
}
console.log(arrowFunc(10))
//With 2 parameters

function funcDeclarationWithTwoParam(weight, height) {
    return weight * height
}
console.log(funcDeclarationWithTwoParam(5, 10))
//Function with many parameters
function sumArrayValues(arr) {
    let sum = 0;
    for (let i = 0; i < arr.length; i++) {
        sum += arr[i]
    }
    return sum;
}
const manyValuesArr = [1, 2, 3, 4]
console.log(sumArrayValues(manyValuesArr))

//Function with unlimited number of parameters | Sınırsız sayıda parametre ile fonksiyon
/*
Bazen kullanıcının kaç argüman ileteceğini bilemeyiz. Bu nedenle, 
sınırsız sayıda argüman alabilen bir fonksiyonun nasıl yazılacağını 
bilmeliyiz. Bunu yapma şeklimiz, bir işlev bildirimi (normal işlev) 
ile ok işlevi arasında önemli bir farka sahiptir. Hem fonksiyon 
bildiriminde hem de ok fonksiyonunda örnekler görelim.
*/


// Unlimited number of parameters in regular function|Normal fonksiyonda sınırsız sayıda parametre

//Bir işlev bildirimi, nesne gibi bir işlev kapsamındaki argümanlar 
// dizisi sağlar. Fonksiyonda argüman olarak ilettiğimiz herhangi 
// bir şeye, fonksiyonların içindeki argümanlar nesnesinden 
// erişilebilir. Bir örnek görelim

//Arguments Objects' çıktısını görelim
function argObjectsFunc() {
    console.log(arguments)
}
argObjectsFunc(1, 2, 3, 4, 5) //Arguments(5) [1, 2, 3, 4, 5, callee: ƒ, Symbol(Symbol.iterator): ƒ]

//Many parameters in Function declaration
function manyValuesFunc() {
    let sum = 0;
    for (let i = 0; i < arguments.length; i++) {
        sum += arguments[i]
    }
    return sum
}
console.log(manyValuesFunc(2, 4, 5, 6, 10)) //27
console.log(manyValuesFunc(22, 41, 55, 60, 109, 12, 123, 1231)) //1653

//Unlimited number of parameters in arrow function |  Arrow fonksiyonda sınırsız sayıda parametre
/*
Ok işlevi, işlev kapsamındaki argümanlar nesnesine sahip değil. Bir 
ok işlevinde sınırsız sayıda argüman alan bir işlevi uygulamak için 
yayılma operatörünü ve ardından herhangi bir parametre adını 
kullanırız. Fonksiyonda argüman olarak ilettiğimiz herhangi bir 
şeye ok fonksiyonunda dizi olarak erişilebilir. Bir örnek görelim
*/
const manyValuesArrowFunc = (...args) => {
    console.log(args)
}
manyValuesArrowFunc(1, 2, 3, 4) //(4) [1, 2, 3, 4]

const sumAllParamsArrowFunc = (...args) => {
    let sum = 0;
    for (const element of args) {
        sum += element
    }
    return sum
}
console.log(sumAllParamsArrowFunc(1, 2, 3, 4)) // 10
console.log(sumAllParamsArrowFunc(10, 20, 13, 40, 10))  // 93
console.log(sumAllParamsArrowFunc(15, 20, 30, 25, 10, 33, 40))  // 173

//Anonymous Function
//Anonim işlev veya adsız

const anonymousFunc = function () {
    console.log('I am an anonymous function and my value is stored in anonymousFun')
}
anonymousFunc()

//Expression Function

//fonksiyonlar bir değişkene veya özelliğe atanarak ya da parametre 
// olarak gönderilirken de tanımlanabilirler. Bu şekilde tanımlamaya 
// ise Fonksiyon İfadeler (Function Expressions) denir.

const expressionFunc = function (n) {
    return n * n
}
console.log(expressionFunc(2))

    //Self Invoking Functions | Kendi Kendini Çağıran İşlevler
    //Kendi kendini çağıran işlevler, bir değer döndürmek için çağrılması gerekmeyen anonim işlevlerdir.
    ; (function (n) {
        console.log(n * n)
    })(2)

let squaredNum = (function (n) {
    return n * n
})(5)
console.log(squaredNum)

//Arrow Function
/*
Arrow Function, ES6 ile sunulan özelliklerden biridir. Arrow Function özelliğinin 
temel amacı JavaScript'te kullanılan fonksiyon tanımlama yöntemini kısaltmak ve 
prartik bir kullanım sağlamaktır.
*/

const exampleSum = (num) => {
    return num * num
}
console.log(exampleSum(5))

const changeToUpperCase = arr => {
    const newArr = []
    for (const element of arr) {
        newArr.push(element.toLocaleUpperCase())
    }
    return newArr
}
const arrowFuncArr = ['Findland', 'Sweden', 'Norway', 'Denmark', 'Island']
console.log(changeToUpperCase(arrowFuncArr))

//Function with default parameters
//Bazen varsayılan değerleri parametrelere iletiriz, işlevi çağırdığımızda bir 
// argüman iletemezsek varsayılan değer kullanılır. Hem işlev bildirimi hem de ok 
// işlevi, varsayılan bir değere veya değerlere sahip olabilir.

function greetings(name = 'Ümmühan') {
    let message = `${name}, welcome to JS`
    return message
}
console.log(greetings())
console.log(greetings('Ufuk'))

const weightofObject = (mass, gravity = 9.81) => {
    let weight = mass * gravity
    return weight
}
console.log(weightofObject(100))
console.log(weightofObject(100, 1.62))

//Exercises: Level 1

//1. Declare a function fullName and it takes firstName, lastName as a parameter and it returns your full - name.

function returnFullName(firstName, lastName) {
    const fullName = `${firstName} ${lastName}`
    return fullName;
}
console.log(returnFullName('Ümmühan', 'Yetişkin'))


//2. Declare a function addNumbers and it takes two two parameters and it returns sum.

const returnTotal = (num1, num2) => {
    return num1 + num2
}
console.log(returnTotal(2, 22))

//3. Bir dairenin alanı şu şekilde hesaplanır: alan = π xrxr . _areaOfCircle değerini hesaplayan bir fonksiyon yazın

const _areOfCirlce = (r) => {
    const area = Math.PI * r * r
    return area
}
console.log(_areOfCirlce(5))

//4. oC cinsinden sıcaklık, şu formül kullanılarak oF'ye dönüştürülebilir: oF = (oC x 9/5) + 32 . oC'yi oF'ye çeviren bir fonksiyon yazın convertCelciusToFahrenheit .

const convertCelciusToFahrenheit = oC => {
    const oF = (oC * 9 / 5) + 32
    return oF
}
console.log(convertCelciusToFahrenheit(50))

//5. BMI 

const calculateBMI = (height, kg) => {
    const bmi = kg / (height * height)

    if (bmi < 15.5) {
        console.log('Underweight')
    } else if (bmi > 18.5 && bmi < 24.9) {
        console.log('Normal weight')
    } else if (bmi > 25 && bmi < 29.9) {
        console.log('Overweight')
    } else {
        console.log('Obese')
    }
}
calculateBMI(1.81, 75)

//6. Write a function called checkSeason, it takes a month parameter and returns the season:Autumn, Winter, Spring or Summer.

const checkSeason = (month) => {
    if (month == 'January' || month == 'February' || month == 'December') {
        console.log('Season is Winter')
    } else if (month == 'March' || month == 'April' || month == 'May') {
        console.log('Season is Spring')
    } else if (month == 'June' || month == 'July' || month == 'Agust') {
        console.log('Season is Summer')
    } else {
        console.log('Season is Autumn')
    }
}
checkSeason('March')

//Exercises Level 2

//1. Quadratic equation is calculated as follows: ax2 + bx + c = 0. Write a function which calculates value or values of a quadratic equation, solveQuadEquation.

const solveQuadEquation = (a, b, c) => {
    let karekok = -1 * ((b * b) - (4 * a * c))
    console.log(karekok)
    let sqrt = Math.sqrt(karekok)
    console.log(sqrt)
    let root1 = ((- 1 * b) + sqrt) / (2 * a)
    let root2 = ((- 1 * b) - sqrt) / (2 * a)

    return `Root 1:${root1} \nRoot 2:${root2}`

}
console.log(solveQuadEquation(1, 1, 2))

//2. printArray bir işlev adı bildirin . Parametre olarak diziyi alır ve dizinin her değerini yazdırır.

const printArray = (...args) => {
    for (const element of args) {
        console.log(element)
    }
}
const exercisesLevel2printArr = [1, 'Ümmühan', 'Deniz', true]
printArray(exercisesLevel2printArr)

//3. Date nesnesini kullanarak zamanı şu biçimde gösteren showDateTime işlev adını yazın : 08/01/2020 04:08.

const showDateTime = () => {
    const now = new Date()
    let todayDate = now.toLocaleDateString()
    let clock = now.toLocaleTimeString()

    return `Date: ${todayDate} Clock: ${clock}`
}
console.log(showDateTime())

//4. swapValues ​​işlev adını bildirin . Bu işlev, x'in değerini y'ye değiştirir.

const swapValues = (a, b) => {
    console.log('First Values: ', a, b)
    let c = a;
    a = b;
    b = c;

    console.log('Second Values: ', a, b)
}
swapValues(2, 3)

//5. Bir işlev adı bildirin reverseArray . Parametre olarak diziyi alır ve dizinin tersini döndürür (yöntem kullanmayın).

const reverseArray = function (arguments) {

    arguments.reverse()
    let argEmptyArr = []
    for (const element of arguments) {
        argEmptyArr.push(element)
    }
    console.log(argEmptyArr)
}
reverseArray([1, 2, 3, 4])

//6. CapitalizeArray işlev adını bildirin . Parametre olarak diziyi alır ve - büyük harfli diziyi döndürür.

const capitalizeArray = function (arguments) {
    for (const element of arguments) {
        console.log(element.toLocaleUpperCase())
    }
}
capitalizeArray(['finland', 'turkey'])

//7. addItem bir işlev adı bildirin . Bir item parametresi alır ve itemi ekledikten sonra bir dizi döndürür

const addItem = function (param) {
    const emptyArr = []
    emptyArr.push(param)
    for (const eleman of emptyArr) {
        console.log(eleman)
    }
}
addItem('First Item')
addItem('Second Item')

//8. RemoveItem bir işlev adı bildirin . Bir indeks parametresi alır ve bir öğeyi çıkardıktan sonra bir dizi döndürür

const removeItem = function (index) {
    let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
    let remove = arr.splice(index, 1)
    console.log(remove) // [3]
    console.log(arr) //(9) [1, 2, 4, 5, 6, 7, 8, 9, 0]
}
removeItem(2);

//9.EvensAndOdds işlev adını bildirin. Parametre olarak pozitif bir tamsayı alır ve sayıdaki çift ve tek sayıları sayar.

const EvensAndOdds = function (param) {
    let even = 0;
    let odd = 0;
    for (let i = 0; i <= param; i++) {
        if (i % 2 == 0) {
            even = even + 1;
        } else {
            odd = odd + 1;
        }
    }
    console.log(`çiftli sayı: ${even} \ntekli sayı: ${odd} `)
}
EvensAndOdds(212)

//10. Herhangi bir sayıda argüman alan ve argümanların toplamını döndüren bir fonksiyon yazın

const sumArguments = function (arguments) {
    let sum = 0;
    for (let i = 0; i < arguments.length; i++) {
        sum = sum + arguments[i]
    }
    return sum
}
console.log(sumArguments([1, 2, 3, 4]))

//11. userIdGenerator işlev adını bildirin . Bu işlev çağrıldığında yedi karakterli kimlik üretir. İşlev kimliği döndürür.

const userIdGenerator = () => {
    const txt = '0123456789ABCDEFGHIJKLMNOPRSTUVYZabcdefghijklmnoprstuvyz'
    const splitTxt = txt.split("")
    let random;
    const hexaArr = []

    for (let i = 1; i <= 7; i++) {
        random = splitTxt[Math.round(Math.random() * splitTxt.length)]
        emptyArr.push(random)
    }
    console.log(`${emptyArr[0]}${emptyArr[1]}${emptyArr[2]}${emptyArr[3]}${emptyArr[4]}${emptyArr[5]}${emptyArr[6]}`)
    hexaArr.push(emptyArr)
    for (const color of hexaArr) {
        console.log(color)
    }

}
userIdGenerator()
userIdGenerator()

//12. Herhangi bir sayıda hexa veya rgb rengi oluşturabilen createColors işlevini yazın .

const createColors = function (type, param) {
    const txt = '0123456789abcdef'
    const splitTxt = txt.split("")
    const emptyArr = []
    const hexaArr = []
    let random
    if (type == 'hexa') {
        for (let y = 1; y <= param; y++) {
            for (let i = 1; i <= 6; i++) {
                random = splitTxt[Math.round(Math.random() * splitTxt.length)]
                emptyArr.push(random)
            }
            console.log(`#${emptyArr[0]}${emptyArr[1]}${emptyArr[2]}${emptyArr[3]}${emptyArr[4]}${emptyArr[5]}`)

        }
        hexaArr.push(emptyArr)
        console.log(hexaArr)
        console.log()

    } else if (type == "rgb") {
        const rgbArr = []
        const randomArr = []
        for (let x = 1; x <= param; x++) {
            for (let i = 1; i <= 3; i++) {
                const random = Math.round(Math.random() * 255)
                randomArr.push(random)
            }
            rgbArr.push(randomArr)
        }
        console.log(rgbArr)
    }
}
createColors('hexa', 3)
createColors('rgb', 1)

console.log("----Higher Order Function || Yüksek Dereceli Function---")
//Higher Order Function || Yüksek Dereceli Function

//Bir veya birden fazla fonksiyonu parametre olarak alan ve işlem sonunda bir 
//fonksiyon dönen fonksiyonlardır.

console.log("---Callback--")
//Callback
//Bir geri çağırma fonksiyonu, başka bir fonksiyona geçirilen bir parametre 
// şeklindeki fonksiyondur. Geri çağırma fonksiyonu, ikinci fonksiyonun içinde 
// çağrılır ya da icra edilir. Geri çağırma fonksiyonları, asenkron olarak icra 
// edilirler.

// bir geri arama function, function herhangi bir ad olabilir

const callBackFunc = (n) => {
    return n * 2
}
// Function diğer işlevi geri çağırma olarak alır
function cubeCallbackFunc(callBackFunc, n) {
    return callBackFunc(n) * n
}

console.log(cubeCallbackFunc(callBackFunc, 9))

console.log("Returning function")
//Returning function
//Başka bir fonksiyon döndüren yüksek dereceli fonksiyon

const higherOrder = n => {
    const doSomething = m => {
        const doWhatEver = t => {
            return 2 * n + 3 * m + t
        }
        return doWhatEver
    }
    return doSomething
}
console.log(higherOrder(2)(3)(10))

//Bakalım geri arama fonksiyonlarını kullanıyor muyduk.Örneğin forEach yöntemi geri aramayı kullanıyor.

const orderArrr = [1, 2, 3, 4]
const sumArray = arr => {
    let sum = 0
    const callback = function (element) {
        sum += element
    }
    arr.forEach(callback)
    return sum
}
console.log(sumArray(orderArrr))
/*
const numbers = [1, 2, 3, 4]
​
const sumArray = arr => {
  let sum = 0
  arr.forEach(function(element) {
    sum += element
  })
  return sum

}
console.log(sumArray(numbers))
*/

console.log("setting time")
//setting time
/*
JavaScript'te belirli bir zaman aralığında bazı aktiviteleri yürütebiliriz veya bazı 
aktivitelerin yürütülmesi için bir süre planlayabiliriz (bekleyebiliriz).

setInterval
setZaman aşımı

setInterval

JavaScript'te, belirli bir zaman aralığında sürekli olarak bazı etkinlikler yapmak
 için setInterval yüksek dereceli işlevi kullanırız. setInterval global yöntemi, 
 parametre olarak bir geri arama işlevi ve bir süre alır. Süre milisaniye cinsindendir 
 ve geri arama her zaman bu zaman aralığında aranacaktır.
*/
console.log("setInterval")


// function setIntervalFunc(){
//     console.log("setInterval after 2000ms")
// }
// setInterval(setIntervalFunc, 2000) //Many Times Hello

//setTimeout
/*
JavaScript'te, gelecekte bir zamanda bazı eylemleri yürütmek için setTimeout yüksek 
dereceli işlevini kullanırız. setTimeout global yöntemi, parametre olarak bir geri 
arama işlevi ve bir süre alır. Süre milisaniye cinsindendir ve geri arama bu süre 
kadar bekler.
*/
function sayHello() {
    console.log("Hello")
}
setTimeout(sayHello, 3000) //Hello


console.log("--- Destructuring and Spreading---")
// Destructuring and Spreading

//Destructuring Assignment; elimizde var olan nesne veya dizi gibi 
// yapı(lar)dan(bu yapılar çok büyük olabilir); küçük parça(lar) ayırmak için 
// kullanılır. Destructuring assignment işlemi değer atama işlemi gibi yapılır.

/*
What is Destructuring?

İmha etme, dizileri ve nesneleri açmanın ve farklı bir değişkene atamanın bir 
yoludur. İmha etme, temiz ve okunabilir kod yazmamızı sağlar.

What can we destructure?

1. Arrays
2. Objects


Destructuring arrays
Diziler, dizinlerine göre sıralanmış farklı veri türlerinin bir listesidir. 
Bir dizi örneği görelim:

*/
const destNumbers = [1, 2, 3]
let destNum1 = destNumbers[0]
let destNum2 = destNumbers[1]
let destNum3 = destNumbers[2]
console.log(destNum1, destNum2, destNum3) //1 2 3

const destCountries = ["Finland", 'Sweden', 'Norway']
let fin = destCountries[0]
let swe = destCountries[1]
let now = destCountries[2]
console.log(fin, swe, now) //Finland Sweden Norway

/*
Çoğu zaman bir dizinin boyutu büyüktür ve dizilerin her bir öğesini yinelemek için 
bir döngü kullanırız. Bazen kısa dizilerimiz olabilir. Dizi boyutu çok kısaysa, 
yukarıda gösterildiği gibi öğelere manuel olarak erişmek sorun değil, ancak bugün 
yıkıcı olan dizi öğesine erişmenin daha iyi bir yolunu göreceğiz.

Yıkımı kullanarak dizi öğelerine erişme
*/
const destNumbers2 = [1, 2, 3, 4, 5, 6]
const [number1, number2, number3, number4, number5, number6] = destNumbers2

console.log(number1, number2, number3, number4, number5, number6) //1 2 3 4 5 6

const constants = [2.72, 3.14, 9.81, 37, 100]
const [e, pi, gravity, bodyTemp, boilingTemp] = constants

console.log(e, pi, gravity, bodyTemp, boilingTemp)// 2.72, 3.14, 9.81, 37,100

//Yıkım sırasında her değişken dizideki istenen öğenin indeksi ile eşleşmelidir.

//Destructuring Nested arrays

const fullStack = [
    ['HTML', 'CSS', 'JS', 'React'],
    ['Node', 'Express', 'MongoDB']
]

const [frontEnd, backEnd] = fullStack
console.log(frontEnd, backEnd)
// (4) ['HTML', 'CSS', 'JS', 'React'] (3) ['Node', 'Express', 'MongoDB']

// Yıkım sırasında bir Öğeyi Atlamak

// Yıkım sırasında her öğeyle ilgilenmiyorsak, o dizine virgül koyarak belirli bir 
// öğeyi atlayabiliriz. Diziden sadece Finlandiya, İzlanda ve Danimarka'yı alalım. 
// Daha fazla netlik için aşağıdaki örneğe bakın:

const ortaDogu = ['Irak', 'Turkey', 'Afganistan', 'Fas', 'Mısır']
const [irak, , afg, , misir] = ortaDogu
console.log(irak, afg, misir) //Irak Afganistan Mısır

// Yayılma operatörünü kullanarak dizinin geri kalanını alma Yıkım sırasında bir dizinin 
// geri kalanını yaymak veya almak için üç nokta(...) kullanırız

const rakamlar = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
const [rakam1, rakam2, rakam3, ...rest] = rakamlar
console.log(rakam1, rakam2, rakam3, rest) //1 2 3 (7) [4, 5, 6, 7, 8, 9, 10]

// Dizi yok etmeyi kullandığımız birçok durum var, şu örneğe bakalım:

// Diziler arasında döngü yaptığımızda yıkım

const europeCountries = [
    ['England', 'London'],
    ['Italy', 'Roma'],
    ['France', 'Paris'],
    ['Poland', 'Warszawa']
]
for (const [country, city] of europeCountries) {
    console.log(country, city)
}


//Destructuring objects
console.log("--Destructuring objects--")

//Bir nesne değişmezi, anahtar ve değer çiftlerinden oluşur. Bir nesnenin çok 
//basit bir örneği:

const rectangle = {
    witdh: 20,
    height: 20
}
let witdh = rectangle.witdh
let height = rectangle.height

console.log(witdh, height)

//Nesnede olmayan bir anahtara erişmeye çalıştığımızda değeri ne olacak.

const rectangle2 = {
    width: 20,
    heih: 20
}
let { width, heih, perimeter } = rectangle2
console.log(width, heih, perimeter) //20 20 undefined

// Yukarıdaki örnekte çevrenin değeri tanımsızdır.

// Nesne imhası sırasında varsayılan değer

// Diziye benzer şekilde, nesne yok etmede de varsayılan bir değer kullanabiliriz.

const dikdortgen = {
    genislik: 10,
    uzunluk: 10
}

let { genislik, uzunluk, cevre = 20 } = dikdortgen
console.log(genislik, uzunluk, cevre) //10 10 20

//Değişken adlarını yeniden adlandırma

const dikdortgen2 = {
    genislik2: 10,
    uzunluk2: 10
}
let { genislik2: g, uzunluk2: h } = dikdortgen2
console.log(g, h)

// Ayrıca iç içe geçmiş nesneleri de yok edelim. Aşağıdaki örnekte iç içe nesneler 
//var ve onu iki şekilde yok edebiliyoruz.

// Sadece adım adım yok edebiliriz

const props = {
    user: {
        firstName: "Deniz",
        lastName: "Yetişkin",
        age: 18
    },
    post: {
        title: 'Student',
        subtitle: 'Preparation',
        year: 2045
    },
    skills:
        ['Swimming', 'English']
}

const { user, post, skills } = props
const { firstName, lastName, age } = user
const { title, subtitle, year } = props
const { firstSkill, secondSkill } = skills

//const {user:{firstName, lastName, age}, post:{title, subtitle, year}, skills:[skillOne, skillTwo, skillThree, skillFour, skillFive]} = props

//Bir dizi boyunca döngü sırasında yıkım

const languages = [
    { lang: 'English', count: 91 },
    { lang: 'French', count: 45 },
    { lang: 'Arabic', count: 25 },
    { lang: 'Spanish', count: 24 },
    { lang: 'Russian', count: 9 },
    { lang: 'Portuguese', count: 9 },
    { lang: 'Dutch', count: 8 },
    { lang: 'German', count: 7 },
    { lang: 'Chinese', count: 5 },
    { lang: 'Swahili', count: 4 },
    { lang: 'Serbian', count: 4 },
]

for (const { lang, count } of languages) {
    console.log(`The ${lang} is spoken in ${count} countries.`)
}

//Yıkıcı fonksiyon parametresi

// const dikdort = {genis: 20, uzun:10}
// const calculateDikdort = ({genis, uzun}) => genis * uzun
// const calculatePerimeter = ({genis, uzun}) => 2 * (genis + uzun)

// console.log(calculateDikdort())
// console.log(calculatePerimeter())

// Exercise


// getPersonInfo adlı bir işlev oluşturun. getPersonInfo işlevi bir nesne parametresi 
// alır. Nesnenin yapısı ve fonksiyonun çıktısı aşağıda verilmiştir. Hem düzenli bir 
// şekilde hem de tahribat yapmaya çalışın ve kodun temizliğini karşılaştırın. 
// Çözümünüzü benim çözümümle karşılaştırmak istiyorsanız, bu bağlantıyı kontrol edin.

const person = {
    firstName: 'Asabeneh',
    lastName: 'Yetayeh',
    age: 250,
    country: 'Finland',
    job: 'Instructor and Developer',
    skills: [
      'HTML',
      'CSS',
      'JavaScript',
      'React',
      'Redux',
      'Node',
      'MongoDB',
      'Python',
      'D3.js',
    ],
    languages: ['Amharic', 'English', 'Suomi(Finnish)'],
}

function getPersonInfo({firstName, lastName, age, country, job, skills, languages} = person){
    const fullName = `${firstName} ${lastName} lives in ${country}. `
    console.log(fullName)
}
getPersonInfo();

console.log("---Spread or Rest Operator---")
//Spread or Rest Operator

// - Rest parametresi isteğe göre argüman girilmesine yardımcı olur.
// - Spread Operatörü diziyi normalde argüman listesi bekleyen fonksiyona atmaya yarar.

//Bir diziyi yok ettiğimizde, kalan öğeleri dizi olarak almak için yayılma 
// operatörünü(...) kullanırız. Buna ek olarak, arr öğelerini başka bir diziye 
// yaymak için spread operatörünü kullanırız.

//Spread operator to get the rest of array elements
//Dizi öğelerinin geri kalanını elde etmek için Spread operatörü

const spreadOperatorArr = [1, 2, 3, 4, 5, 6, 7, 8, 9]
let [say1, say2, say3, ...restSayi] = spreadOperatorArr

console.log(say1, say2, say3) //1 2 3
console.log(restSayi) //(6) [4, 5, 6, 7, 8, 9]

//Spread operator to copy array

const evensNums = [ 0, 2, 4, 6, 8]
const copyEvenNums = [...evensNums]

const oddsNums = [1, 3, 5, 7, 9]
const copyOddNums = [...oddsNums]

const wholeNumbers = [...copyEvenNums, ...copyOddNums]

console.log(wholeNumbers) //(10) [0, 2, 4, 6, 8, 1, 3, 5, 7, 9]
console.log(copyOddNums) //[1, 3, 5, 7, 9]
console.log(copyEvenNums) //[0, 2, 4, 6, 8]

const frontend = ["HTML", "CSS", "JavaScript", "React"]
const backend = ["C#", "Java", "MongoDB"]
const fullstack = [...frontend, ...backend]

console.log(fullstack) //(7) ['HTML', 'CSS', 'JavaScript', 'React', 'C#', 'Java', 'MongoDB']


//Spread operator to copy object

//Bir yayılma operatörü kullanarak bir nesneyi kopyalayabiliriz
const meral = {
    name : 'Meral',
    title : 'Finance',
    country : 'Turkey',
    city : 'Amed'
}
const copiedMeral = {...meral}
console.log(copiedMeral) //{name: 'Meral', title: 'Finance', country: 'Turkey', city: 'Amed'}

//Modifying or changing the object while copying

const copiedMeralAgain = {...meral, city:"İstanbul"}
console.log(copiedMeralAgain) //{name: 'Meral', title: 'Finance', country: 'Turkey', city: 'İstanbul'}

//Spread operator with arrow function

//Sınırsız sayıda argüman alan bir ok işlevi yazmak istediğimizde bir yayılma 
//operatörü kullanırız. Parametre olarak bir yayılma operatörü kullanırsak, bir 
//işlevi çağırdığımızda iletilen argüman bir diziye dönüşecektir.

const sumAllNums = (...args) => {
    let sum = 0;
    for(const num of args){
        sum += num
    }
    return sum
}

console.log(sumAllNums(3,5,9,20)) //37