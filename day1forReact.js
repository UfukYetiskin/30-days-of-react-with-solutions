//JavaScript Refresher


//---- Variables ----
// Değişken bildirmek için var , let ve const kullanırız . var fonksiyon kapsamıdır, ancak let ve const blok kapsamıdır. Bu yarışmada JavaScript'in ES6 ve üzeri özelliklerini kullanıyoruz. var kullanmaktan kaçının .
let personName = "Ümmühan"
const PI = 3.14;

console.log(personName);
console.log(PI);

//---- Data Types ----
// Numbers - Integers, floats
// Strings - Any data under single quote, double quote or backtick quote
// Booleans - true or false value
// Null - empty value or no value
// Undefined - a declared variable without a value
// Symbol - A unique value that can be generated by Symbol constructor

//---- Arrays -----

const emptyArr = [];

const numbersArr = [0, 3.14, 9.81, 37, 98.6, 100]
const fruitsArr = ['banana', 'orange', 'mango', 'lemon']
const vegetablesArr = ['tomato', 'potato', 'Cabbage', 'Onion']

console.log(numbersArr);
console.log(fruitsArr)
console.log(vegetablesArr)

const ummuhanArr = [
    'Ümmühan',
    'Yetişkin',
    true,
    { country: 'Turkey', city: 'Aydın' },
    { skills: ['marketing', 'sales'] }
]
console.log(ummuhanArr);

//Creating an array using split

let js = 'JavaScript'
const charsInJS = js.split('');
console.log(charsInJS); //['J', 'a', 'v', 'a', 'S', 'c', 'r', 'i', 'p', 't']
console.log(charsInJS[0]); // J

// Accessing array items using index
//Dizideki her öğeye dizinlerini kullanarak erişiriz. Bir dizi indeksi 0'dan başlar. 

const fruitArr = ['Apple', 'Mandalin', 'Lemon']
let firstFruitArrValue = fruitArr[0]
console.log(firstFruitArrValue); //Apple

let lastIndexofFruitValue = fruitArr[fruitArr.length - 1]
let lastIndexofFruitValue2 = fruitArr.length - 1
console.log(lastIndexofFruitValue); //Lemon
console.log(fruitArr[lastIndexofFruitValue2]); //Lemon

//Modifying array element
//Bir dizi değiştirilebilir (değiştirilebilir). Bir dizi oluşturulduktan sonra dizi öğelerinin içeriğini değiştirebiliriz.

const modifyNumbersArr = [1, 2, 3, 4, 5]
modifyNumbersArr[0] = 6
modifyNumbersArr[1] = 7;
console.log(modifyNumbersArr);//[6, 7, 3, 4, 5]

// ---- Methods to manipulate array | Diziyi işleme yöntemleri

// Bir diziyi işlemek için farklı yöntemler vardır. Dizilerle başa 
//çıkmak için mevcut yöntemlerden bazıları şunlardır: Array, length, 
//concat, indexOf, dilim, splice, join, toString, include, lastIndexOf, 
//isArray, fill, push, pop, shift, unshift

//Array Constructor | Dizi oluşturma

const createArr = Array()
console.log(createArr); //[]

const eightEmptyValuesArr = Array(8);
console.log(eightEmptyValuesArr); // (8) [boş × 8]

// ---- Concatenating  array using concat
//concat: İki diziyi birleştirmek için.

const firstConcatNumberList = [1, 2, 3]
const secondConcarNumberList = [4, 5, 6]
const concatedNumberLists = firstConcatNumberList.concat(secondConcarNumberList);

console.log(concatedNumberLists); //(6) [1, 2, 3, 4, 5, 6]


//--- Getting array length

const getArrayLength = [1, 3, 5, 6, 12, 41]
console.log(getArrayLength)//[1, 3, 5, 6, 12, 41]

//Getting index of an element 
// indexOf:  Bir dizide bir öğenin olup olmadığını kontrol etmek için kullanılır. Eğer dizide kontrol edilmek istenilen değer varsa index değerini döndürür, aksi takdirde elemana sahip değilse -1 döndürür

const indexOfMethodArr = ['Ummuhan', 'Ufuk', 'Deniz', 'Artemis']
console.log(indexOfMethodArr.indexOf('Ummuhan')) // 0
console.log(indexOfMethodArr.indexOf('Mete')) // -1
console.log(indexOfMethodArr.indexOf('Ufuk')) // 1
console.log(indexOfMethodArr.indexOf('deniz')) // -1
console.log(indexOfMethodArr.indexOf('Deniz')) // 2

//Check items in a list

const checkFruitsArr = ['Banana', 'Orange', 'Mango', 'Lemon']
let indexofMango = checkFruitsArr.indexOf('Mango') //2

if (indexofMango != -1) {
    console.log('This fruit does exits in the array')
} else {
    console.log('This fruit does not exits in the array');
}
//This fruit does exits in the array

indexofMango != 1
    ? console.log('This fruit does exits in the array')
    : console.log('This fruit does not exits in the array')
//This fruit does exits in the array

//-- Getting last index of an element in array
//lastIndexOf: Dizide tekrar eden değerin en son indexini verir. Eğer dizide eşleşen öğe yoksa -1 döndürür.

const lastIndexOfMethodArr = [1, 2, 3, 4, 5, 3, 1, 2]

console.log(lastIndexOfMethodArr.lastIndexOf(2)) //7
console.log(lastIndexOfMethodArr.lastIndexOf(4)) //3
console.log(lastIndexOfMethodArr.lastIndexOf(3)) //5
console.log(lastIndexOfMethodArr.lastIndexOf(1)) // 6

//includes: : Bir dizide bir öğenin olup olmadığını kontrol etmek için. Varsa, true değerini döndürür, aksi takdirde false değerini döndürür.

const includesMethodArr = [9, 2, 3, 5, 1, 7]

console.log(includesMethodArr.includes(2)) //true
console.log(indexOfMethodArr.includes(6)) // false

//-- Checking Array
// Array.isArray: Veri türünün Array(dizi) olup olmadığını döndürür

console.log(Array.isArray(lastIndexOfMethodArr)); //true
console.log(Array.isArray(firstFruitArrValue)); //false


// -- Converting array to String
//toString: diziyi string değere dönüştürür

const convertArrtoStringNumbers = [1, 2, 3, 4, 5]
const convertArrtoStringNames = ["Ümmühan", 'Ufuk', 'Deniz']

console.log(convertArrtoStringNames.toString())
console.log(convertArrtoStringNumbers.toString())
// Ümmühan,Ufuk,Deniz
// 1,2,3,4,5

// --- Joining array elements
// join: Dizinin elemanlarını birleştirmek için kullanılır, birleştirme yönteminde ilettiğimiz argüman dizide birleştirilir ve bir dize olarak döndürülür. Varsayılan olarak bir virgül ile birleşir, ancak öğeler arasında birleştirilebilecek farklı dize parametreleri iletebiliriz.

const joinNames = ["Ümmühan", 'Ufuk', 'Deniz']
const joinNumbers = [1, 2, 3, 4, 5]

console.log(joinNames.join()); // Ümmühan,Ufuk,Deniz
console.log(joinNames.join(', ')) //Ümmühan, Ufuk, Deniz
console.log(joinNumbers.join('#')) //1 #2 #3 #4 #5

//-- Slice Array elements
//slice: Aralıktaki birden çok öğeyi kesmek için. İki parametre alır: başlangıç ​​ve bitiş konumu. Bitiş konumunu içermez.

const sliceNumbers = [1, 2, 3, 4, 5, 6, 7]
console.log(sliceNumbers.slice()) // bütün elemanları kopyalar
console.log(sliceNumbers.slice(0)) //Bütün elemanları kopyalar
console.log(sliceNumbers.slice(0, sliceNumbers.length)) //Bütün elemanları kopyalar
console.log(sliceNumbers.slice(2, 5)) //[3, 4, 5] , son elemanı içermez

//splice method in array
//splice: Üç parametre alır: Başlangıç ​​konumu, kaç kez kaldırılacak ve eklenecek öğe sayısı.

const spliceNumbers = [1, 2, 3, 4, 5]
console.log(spliceNumbers.splice()) // bütün elemanları siler

const spliceNumbers2 = [1, 2, 3, 4, 5]
console.log(spliceNumbers2.splice(0, 1)) //birinci elemanı siler

const spliceNumbers3 = [1, 2, 3, 4, 5, 6]
console.log(spliceNumbers3.splice(3, 3, 7, 8, 9)) // [1, 2, 3, 7, 8, 9] it removes three item and replace three items

//-- Adding item to an array using push
//push: sonunda öğe ekleme. Mevcut bir dizinin sonuna öğe eklemek için push yöntemini kullanırız.

const pushArr = ['item1', 'item2', 'item3']
pushArr.push('new item');

console.log(pushArr) // ['item1', 'item2', 'item3', 'new item']

//-- Removing the end element using pop
// pop: dizinin son elemanını siler

const popArr = ['firstItem', 'secondItem', 'thirdItem']
popArr.pop();
console.log(popArr); //['firstItem', 'secondItem']

// -- Removing an element from the beginning
//shift: Removing one array element in the begining of the array

const shiftArr = ['firstItem', 'secondItem', 'thirdItem']
shiftArr.shift()
console.log(shiftArr);//['secondItem', 'thirdItem']

//-- Add an element from the beginning
//unshift: dizinin en başına elemen ekler

const unshiftArr = ['firstItem', 'secondItem', 'thirdItem']
unshiftArr.unshift('zero');
console.log(unshiftArr);//['zero', 'firstItem', 'secondItem', 'thirdItem']

//Reversing array order
//reverse: dizinin sırasını index değerlerine göre tersine çevirir

const reverseArr = [1, 2, 3, 4, 5]
console.log(reverseArr.reverse()) //0:5 1:4 2:3 3:2 

//Sorting elements in array
//sort: dizi öğelerini artan sırada düzenleyin. Sort bir geri arama fonksiyonu alır, sort geri arama fonksiyonu ile nasıl kullandığımızı ilerleyen bölümlerde göreceğiz.

const sortArr = ['Ufuk', 'Ümmühan', 'Deniz', 'Artemis']
console.log(sortArr.sort(function (b, a) { return b - a }))

const sortNumbers = [22, 12, 2, 3, 5]
console.log(sortNumbers.sort(function (a, b) { return b - a }))

//Array of arrays 
// Dizi, bir dizinin kendisi de dahil olmak üzere farklı veri türlerini depolayabilir. Bir dizi dizi oluşturalım

const arrayofArray = [[1, 2, 3, 4, 5], ['HTML', 'JS', 'CSS', 'React']]
console.log(arrayofArray)
console.log(arrayofArray[0]) //[1, 2, 3, 4, 5]
console.log(arrayofArray[1]); //['HTML', 'JS', 'CSS', 'React']
console.log(arrayofArray.length) // 2

//Execises 
console.log("--- Exercises Level 1")
const firstExercisesCountriesArr = ['Albania',
    'Bolivia',
    'Canada',
    'Denmark',
    'Ethiopia',
    'Finland',
    'Germany',
    'Hungary',
    'Ireland',
    'Japan',
    'Kenya',]
const firstExercisesWebTechsArr = [
    'HTML',
    'CSS',
    'JavaScript',
    'React',
    'Redux',
    'Node',
    'MongoDB',]
// 1. Declare an empty array
const exerciseEmptyArr = Array();

//2. Declare an array with more than 5 number of elements
const exerciseEmptyArr2 = Array(5)

//3. Find the length of your array
console.log(exerciseEmptyArr2.length) // 5 

//4. Get the first item, the middle item and the last item of the array
console.log('First item of the Countries: ', firstExercisesCountriesArr[0])
console.log('Middle item of the Countries: ', firstExercisesCountriesArr[Math.round(firstExercisesCountriesArr.length / 2)])
console.log('Last item of the Countries: ', firstExercisesCountriesArr[firstExercisesCountriesArr.length - 1])

//5. Declare an array called mixedDataTypes, put different data types in the array and find the length of the array. The array size should be greater than 5
const mixedDataTypes = ["Ümmühan", { name: "Ümmühan", surname: "Gümüş" }, 23, ['Marketing', 'Digitale Marketing', 'Sales'], true]
//6. Declare an array variable name itCompanies and assign initial values Facebook, Google, Microsoft, Apple, IBM, Oracle and Amazon
const itCompanies = ['Facebook', 'Google', 'Microsoft', 'Apple', 'IBM', 'Oracle', 'Amazon']
//7. Print the array using console.log()
console.log(itCompanies)

//8. Print the number of companies in the array
console.log(itCompanies.length)
//9. Print the first company, middle and last company
console.log('First Company: ', itCompanies[0])
console.log('Middle Company: ', itCompanies[Math.round(itCompanies.length / 2)])
console.log('Last Company: ', itCompanies[itCompanies.length - 1])
//10. Print out each company
itCompanies.map(company => console.log(company))
//11. Change each company name to uppercase one by one and print them out
itCompanies.map(company => console.log(company.toLocaleUpperCase()))
//12. Print the array like as a sentence: Facebook, Google, Microsoft, Apple, IBM,Oracle and Amazon are big IT companies.
const indexOfFB = itCompanies.indexOf('Facebook');
const indexOfGoogle = itCompanies.indexOf('Google');
const indexOfMicrosoft = itCompanies.indexOf('Microsoft');
const indexOfApple = itCompanies.indexOf('Apple');
const indexOfIBM = itCompanies.indexOf('IBM');
const indexOfOracle = itCompanies.indexOf('Oracle');
const indexOfAmazon = itCompanies.indexOf('Amazon');
console.log(`${itCompanies[indexOfFB]}, ${itCompanies[indexOfGoogle]}, ${itCompanies[indexOfMicrosoft]}, ${itCompanies[indexOfApple]}, ${itCompanies[indexOfIBM]}, ${itCompanies[indexOfOracle]} and ${itCompanies[indexOfAmazon]} are big IT companies.`)
//13. Check if a certain company exists in the itCompanies array. If it exist return the company else return a company is not found
if (itCompanies.indexOf('Getir') == -1) {
    itCompanies.push('Getir')
} else {
    console.log('Getir, dizide mevcut')
}
//14. Filter out companies which have more than one 'o' without the filter method
itCompanies.map(company => {
    if (company.split("o").length - 1 >= 2) {
        console.log(company)
    }
})
for (let i = 0; i < itCompanies.length; i++) {
    if (itCompanies[i].split("o").length - 1 >= 2) {
        console.log(itCompanies[i])
    }
}
//15. Sort the array using sort() method
itCompanies.sort();
//16.Reverse the array using reverse() method
itCompanies.reverse()
//17. Slice out the first 3 companies from the array
console.log(itCompanies.slice(0, 3))

//18. Slice out the last 3 companies from the array
console.log(itCompanies.slice(itCompanies.length - 4, itCompanies.length - 1))
//19. Slice out the middle IT company or companies from the array
console.log(itCompanies.slice(itCompanies.length / 2, itCompanies.length / 2))
//20. Remove the first IT company from the array
itCompanies.shift();
//21. Remove the middle IT company or companies from the array

//22. Remove the last IT company from the array
//23. Remove all IT companies
console.log(itCompanies.splice(0, itCompanies.length))
console.log(itCompanies)

//4. Conditionals(Koşullar)

console.log(' --------- Conditionals (Koşullar) ------')

//if
let num = 3;
if (num > 0) {
    console.log(`${num} is positive number`)
}

let isRaining = true
if (isRaining) {
    console.log('Remember to take your rain coat.')
}

//Switch

let todayIsSunday = 'Sunday'
switch (todayIsSunday) {
    case 'Sunday':
        console.log('Today is Sunday')
        break
    case 'Friday':
        console.log('Today is Friday')
        break;
    default:
        break;
}


//Ternary Operators
//Üçlü operatör React'te çok yaygındır . If else ifadesini yazmanın kısa bir yoludur. React'te birçok durumda üçlü operatör kullanırız.
let isRainingToday = true
isRainingToday
    ? console.log('You need a rain coat')
    : console.log('No need for a rain coat')

//5. Loops (Döngüler)
console.log('---Loops----')
/*
Programlamada, tekrarlayan görevleri gerçekleştirmek için farklı döngüler kullanırız.
 Bu nedenle döngü, sıkıcı ve tekrarlayan görevleri otomatikleştirmemize yardımcı 
 olabilir. JavaScript'te ayrıca tekrarlayan görevler üzerinde çalışmak için 
 kullanabileceğimiz farklı döngü türleri vardır.

Bir döngü olmadan bin kez Merhaba dünya yazdırmanız istendiğini hayal edin, bu sıkıcı 
görevi yapmak bir veya iki saat sürebilir. Ancak, döngü kullanarak bir saniyeden daha 
kısa sürede yazdırabiliriz.

Loops:
    for
    while
    do while
    for of
    forEach
    for in
*/

//for
for (let i = 0; i < 10; i++) {
    console.log(i)
}

let sum = 0;
for (let i = 0; i < 11; i++) {
    sum += i
}
console.log(sum)

const forLoopsArr = [11, 22, 33, 44]
for (let i = 0; i < forLoopsArr.length; i++) {
    console.log(forLoopsArr[i])
}
//Diziyi tersine çevirir
const reverseArrWithFor = ['First Item', 'Second Item', 'Third İtem', 'Fourth Item']
const lastIndexofFor = reverseArrWithFor.length - 1
const newArrFor = []
for (let i = lastIndexofFor; i >= 0; i--) {
    newArrFor.push(reverseArrWithFor[i])
}
console.log(newArrFor)

//while
let promptCount = 8
while (promptCount > 0) {
    console.log(promptCount)
    promptCount--
}

//do while
let doWhileCount = 0
do {
    console.log(doWhileCount)
    doWhileCount++
} while (doWhileCount < 11)

//for of 

const forOfArr = ['Finland', 'Sweden', 'Norway', 'Denmark', 'Iceland']
for (const country of forOfArr) {
    console.log(country.toLocaleLowerCase())
}

//forEach
//Dizinin dizini ile ilgileniyorsak, forEach dizisi for of döngüsüne tercih edilir. forEach dizisi yöntemi bir geri arama işlevi alır, geri arama işlevi üç bağımsız değişken alır: öğe, dizin ve dizinin kendisi
const forEachNumbersArr = [11, 12, 13, 14]
forEachNumbersArr.forEach((number, index) => {
    console.log(number, index)
})

const forEachCountriesArr = ['Finland', 'Sweden', 'Norway', 'Denmark', 'Iceland']
forEachCountriesArr.forEach((country, index, arr) => {
    console.log(index, country.toLocaleUpperCase())
})

//for in
//for in döngüsü, nesnenin anahtarlarını almak için nesne değişmezleriyle birlikte kullanılabilir.
const forInLoopsObject = {
    firstName: 'Asabeneh',
    lastName: 'Yetayeh',
    age: 250,
    country: 'Finland',
    skills: ['HTML', 'CSS', 'JS', 'React', 'Node', 'Python', 'D3.js'],
}
for(const key in forInLoopsObject){
    console.log(key, forInLoopsObject[key])
}